// generated by C:/RMAbuild/planningstool-mi/logic/ddl2cpp C:/RMAbuild/planningstool-mi/logic/geoscheme.ddl C:/RMAbuild/planningstool-mi/build/planningstool-pre/logic/geoscheme pt::db
#ifndef PT_DB_GEOSCHEME_H
#define PT_DB_GEOSCHEME_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace pt
{
namespace db
{
  namespace Drinkwaterbeschermingsgebieden_
  {
    struct Xcoord
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xcoord";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xcoord;
            T& operator()() { return xcoord; }
            const T& operator()() const { return xcoord; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Ycoord
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ycoord";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ycoord;
            T& operator()() { return ycoord; }
            const T& operator()() const { return ycoord; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Drinkwaterbeschermingsgebieden_

  struct Drinkwaterbeschermingsgebieden: sqlpp::table_t<Drinkwaterbeschermingsgebieden,
               Drinkwaterbeschermingsgebieden_::Xcoord,
               Drinkwaterbeschermingsgebieden_::Ycoord,
               Drinkwaterbeschermingsgebieden_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "drinkwaterbeschermingsgebieden";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T drinkwaterbeschermingsgebieden;
        T& operator()() { return drinkwaterbeschermingsgebieden; }
        const T& operator()() const { return drinkwaterbeschermingsgebieden; }
      };
    };
  };
  namespace Bovengrondsedrinkwatervoorzieningen_
  {
    struct Xcoord
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xcoord";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xcoord;
            T& operator()() { return xcoord; }
            const T& operator()() const { return xcoord; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Ycoord
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ycoord";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ycoord;
            T& operator()() { return ycoord; }
            const T& operator()() const { return ycoord; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Bovengrondsedrinkwatervoorzieningen_

  struct Bovengrondsedrinkwatervoorzieningen: sqlpp::table_t<Bovengrondsedrinkwatervoorzieningen,
               Bovengrondsedrinkwatervoorzieningen_::Xcoord,
               Bovengrondsedrinkwatervoorzieningen_::Ycoord,
               Bovengrondsedrinkwatervoorzieningen_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "bovengrondsedrinkwatervoorzieningen";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T bovengrondsedrinkwatervoorzieningen;
        T& operator()() { return bovengrondsedrinkwatervoorzieningen; }
        const T& operator()() const { return bovengrondsedrinkwatervoorzieningen; }
      };
    };
  };
  namespace Overstromingsgebieden_
  {
    struct Xcoord
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xcoord";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xcoord;
            T& operator()() { return xcoord; }
            const T& operator()() const { return xcoord; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Ycoord
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ycoord";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ycoord;
            T& operator()() { return ycoord; }
            const T& operator()() const { return ycoord; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Overstromingsgebieden_

  struct Overstromingsgebieden: sqlpp::table_t<Overstromingsgebieden,
               Overstromingsgebieden_::Xcoord,
               Overstromingsgebieden_::Ycoord,
               Overstromingsgebieden_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "overstromingsgebieden";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T overstromingsgebieden;
        T& operator()() { return overstromingsgebieden; }
        const T& operator()() const { return overstromingsgebieden; }
      };
    };
  };
  namespace Speerpuntaandachtsgebieden_
  {
    struct Xcoord
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xcoord";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xcoord;
            T& operator()() { return xcoord; }
            const T& operator()() const { return xcoord; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Ycoord
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ycoord";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ycoord;
            T& operator()() { return ycoord; }
            const T& operator()() const { return ycoord; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Speerpuntaandachtsgebieden_

  struct Speerpuntaandachtsgebieden: sqlpp::table_t<Speerpuntaandachtsgebieden,
               Speerpuntaandachtsgebieden_::Xcoord,
               Speerpuntaandachtsgebieden_::Ycoord,
               Speerpuntaandachtsgebieden_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "speerpuntaandachtsgebieden";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T speerpuntaandachtsgebieden;
        T& operator()() { return speerpuntaandachtsgebieden; }
        const T& operator()() const { return speerpuntaandachtsgebieden; }
      };
    };
  };
} // namespace pt
} // namespace db
#endif
